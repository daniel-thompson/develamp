declare name "RF-FX Utility Library";
declare author "Daniel Thompson";
declare copyright "2012";
declare version "1.0";
declare license "GPLv3+";
declare reference "http://redfelineninja.org.uk/software/rfeffects.html";

import("filter.lib");

//
// Additional maths functions

sign(x) = if(x >= 0, 1, -1);

//
// Basic smoothing functions
//

// 5ms time constant for well mannered controls
smoothctl = smooth(tau2pole(0.005));

rectify(tau) = abs : smooth(tau2pole(tau));
rectifyhz(hz) = rectify(1.0 / hz);


//
// Simple linear range alteration
//

rfline(x1, y1, x2, y2) =
        *((y2 - y1)/(x2 - x1)) : +(((y2*x1) - (y1*x2))/(x1 - x2));

rerange(min_in, max_in, min_out, max_out) =
        rfline(min_in, min_out, max_in, max_out);

//
// Control smoothed panner maintaining sound intensity
//

panner2(position) = _ <: left, right with {
      leftness = position : rerange(-1, 1, 1, 0);
      left = *(leftness : sqrt : smoothctl);
      right = *(1-leftness : sqrt : smoothctl);
};

//
// Control smoothed wet/dry maintaining sound intensity
//

wetdry(wetness) = _,_ : wet, dry :> _ with {
        wet = *(wetness : sqrt : smoothctl);
        dry = *(1-wetness : sqrt : smoothctl);
};

//
// Bypassing utilities
//

bypassmono(bypass, dsp) = _ <: ((dsp : *(bypass)), *(1-bypass)) :> _;

// cutoffmono is a bypassmono workalike but because it uses select2 rather
// than a smooth cross-over (i.e. there is no de-pops) it prevents the
// propagation of -nan. Use this mostly for debugging.
cutoutmono(bypass, dsp) = _ <: dsp, _ : select2(bypass<0.5);
